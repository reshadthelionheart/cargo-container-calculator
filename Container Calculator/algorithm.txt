{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 function convertToMetric(length, width, height, weight, isImperial) \{\
  if (isImperial) \{\
    length *= 0.3048; // feet to meters\
    width *= 0.3048; // feet to meters\
    height *= 0.3048; // feet to meters\
    weight *= 0.453592; // pounds to kilograms\
  \}\
  return \{ length, width, height, weight \};\
\}\
\
function calculateNonStackableContainers(totalSurfaceArea, totalBoxes, weightPerBox, containers) \{\
  let minContainers = Number.MAX_VALUE;\
  let bestContainer = null;\
\
  for (const container of containers) \{\
    if (container.maxWeight >= weightPerBox) \{\
      const containerSurfaceArea = container.length * container.width;\
      const boxesPerContainer = Math.floor(containerSurfaceArea / totalSurfaceArea);\
\
      if (boxesPerContainer > 0) \{\
        const containersNeeded = Math.ceil(totalBoxes / boxesPerContainer);\
        if (containersNeeded < minContainers) \{\
          minContainers = containersNeeded;\
          bestContainer = container;\
        \}\
      \}\
    \}\
  \}\
\
  return \{ bestContainer, minContainers \};\
\}\
\
function calculateStackableContainers(volume, totalWeight, containers) \{\
  let minContainers = Number.MAX_VALUE;\
  let bestContainer = null;\
\
  for (const container of containers) \{\
    if (totalWeight <= container.maxWeight) \{\
      const containerVolume = container.length * container.width * container.height;\
      const containersNeeded = Math.ceil(volume / containerVolume);\
\
      if (containersNeeded < minContainers) \{\
        minContainers = containersNeeded;\
        bestContainer = container;\
      \}\
    \}\
  \}\
\
  return \{ bestContainer, minContainers \};\
\}\
\
function calculateContainers(length, width, height, weight, stackable, isImperial, totalBoxes) \{\
  const \{ length: metricLength, width: metricWidth, height: metricHeight, weight: metricWeight \} = convertToMetric(length, width, height, weight, isImperial);\
\
  const containers = [\
    \{ name: '20ft DV', length: 6.058, width: 2.438, height: 2.591, maxWeight: 12800 \},\
    \{ name: '40ft DV', length: 12.192, width: 2.438, height: 2.591, maxWeight: 26700 \},\
    \{ name: '20ft HC', length: 6.058, width: 2.438, height: 2.896, maxWeight: 12800 \},\
    \{ name: '40ft HC', length: 12.192, width: 2.438, height: 2.896, maxWeight: 26700 \},\
  ];\
\
  const totalSurfaceArea = metricLength * metricWidth;\
  const totalVolume = metricLength * metricWidth * metricHeight;\
  const weightPerBox = metricWeight / totalBoxes;\
\
  if (!stackable) \{\
    return calculateNonStackableContainers(totalSurfaceArea, totalBoxes, weightPerBox, containers);\
  \} else \{\
    return calculateStackableContainers(totalVolume, metricWeight, containers);\
  \}\
\}\
}